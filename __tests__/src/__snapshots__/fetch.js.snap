// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fetch should dispatch a fetchError if the arity of \`next\` is < 2 1`] = `
Array [
  Object {
    "payload": Object {
      "options": Object {},
      "url": "http://fakeurl.com",
    },
    "type": "increment outstanding fetches",
  },
  Object {
    "payload": Object {
      "options": Object {},
      "url": "http://fakeurl.com",
    },
    "type": "decrement outstanding fetches",
  },
  Object {
    "payload": Body {
      "_abort": false,
      "_raw": Array [],
      "body": PassThrough {
        "_events": Object {
          "close": [Function],
          "drain": [Function],
          "end": [Function],
          "error": [Function],
          "finish": [Function],
          "prefinish": [Function],
          "unpipe": [Function],
        },
        "_eventsCount": 7,
        "_maxListeners": undefined,
        "_readableState": ReadableState {
          "awaitDrain": 0,
          "buffer": BufferList {
            "head": null,
            "length": 0,
            "tail": null,
          },
          "decoder": null,
          "defaultEncoding": "utf8",
          "emittedReadable": false,
          "encoding": null,
          "endEmitted": false,
          "ended": false,
          "flowing": null,
          "highWaterMark": 16384,
          "length": 0,
          "needReadable": true,
          "objectMode": false,
          "pipes": null,
          "pipesCount": 0,
          "ranOut": false,
          "readableListening": false,
          "reading": false,
          "readingMore": false,
          "resumeScheduled": false,
          "sync": false,
        },
        "_transformState": TransformState {
          "afterTransform": [Function],
          "needTransform": false,
          "transforming": false,
          "writecb": null,
          "writechunk": null,
          "writeencoding": null,
        },
        "_writableState": WritableState {
          "bufferProcessing": false,
          "bufferedRequest": null,
          "bufferedRequestCount": 0,
          "corked": 0,
          "corkedRequestsFree": CorkedRequest {
            "entry": null,
            "finish": [Function],
            "next": null,
          },
          "decodeStrings": true,
          "defaultEncoding": "utf8",
          "ended": false,
          "ending": false,
          "errorEmitted": false,
          "finished": false,
          "highWaterMark": 16384,
          "lastBufferedRequest": null,
          "length": 0,
          "needDrain": false,
          "objectMode": false,
          "onwrite": [Function],
          "pendingcb": 0,
          "prefinished": false,
          "sync": true,
          "writecb": null,
          "writelen": 0,
          "writing": false,
        },
        "allowHalfOpen": true,
        "domain": null,
        "readable": true,
        "writable": true,
      },
      "bodyUsed": false,
      "headers": Headers {
        "_headers": Object {},
      },
      "ok": false,
      "size": 0,
      "status": 400,
      "statusText": "Bad Request",
      "timeout": 0,
      "url": "http://fakeurl.com",
      "value": undefined,
    },
    "type": "fetch error",
  },
]
`;

exports[`fetch should not dispatch a fetchError if the arity of \`next\` is >= 2 1`] = `
Array [
  Object {
    "payload": Object {
      "options": Object {},
      "url": "http://fakeurl.com",
    },
    "type": "increment outstanding fetches",
  },
  Object {
    "payload": Object {
      "options": Object {},
      "url": "http://fakeurl.com",
    },
    "type": "decrement outstanding fetches",
  },
]
`;
